CLS
$startTime = Get-Date
Write-Host "===============================Phase-1 (Exporting Reports) ======================================================(Started)" -ForegroundColor Green

# Set execution policy for the process
Set-ExecutionPolicy -ExecutionPolicy 'ByPass' -Scope 'Process' -Force -ErrorAction 'Stop'

#====================== User Input ==================================
# Tenant and app details
$tenant = “d914085e-e994-4c53-b111-0f20b7f866bf”
$authority = “https://login.windows.net/$tenant”
$clientId = “d546c729-2aa7-4665-b246-e32af60743ea”
$clientSecret = “IgX8Q~xXK6gj3dvKkLKXJdjUregy5z1.RoMQwbrb”
$reportNames = @("DevicesWithInventory", "WindowsDeviceHealthAttestationReport")
#===================================================================
# Initialize variables
$DetectApp = "Microsoft Intune Management Extension"
$error.clear() # Clear error history
$Pathfinalreport = "C:\DeviceStatusesByConfiguration_Report.csv"
$WorkingFolder = "C:\TEMP\Intune_DeviceStatusesByConfigurationProfile_Report"
$Path = "$WorkingFolder\PD_Dump\"
$MGIModule = Get-Module -Name "Microsoft.Graph.Intune" -ListAvailable

# Check if Microsoft.Graph.Intune module is installed
Write-Host "Checking if Microsoft.Graph.Intune is Installed"
if ($MGIModule -eq $null) {
    Write-Host "Microsoft.Graph.Intune module is not Installed"
    Write-Host "Installing Microsoft.Graph.Intune module"
    Install-Module -Name Microsoft.Graph.Intune -Force
    Write-Host "Importing Microsoft.Graph.Intune module"
    Import-Module Microsoft.Graph.Intune -Force
} else {
    Write-Host "Microsoft.Graph.Intune is Installed"
    Write-Host "Importing Microsoft.Graph.Intune module"
    Import-Module Microsoft.Graph.Intune -Force
}

# Connect to Microsoft Graph API
Update-MSGraphEnvironment -AppId $clientId -Quiet
Update-MSGraphEnvironment -AuthUrl $authority -Quiet
Connect-MSGraph -ClientSecret $ClientSecret -Quiet
Update-MSGraphEnvironment -SchemaVersion "Beta" -Quiet

$PD_DumpPath = "$WorkingFolder\PD_Dump"

# Check if the folder exists and delete it
if (Test-Path -Path $PD_DumpPath) {
    Remove-Item -Path $PD_DumpPath -Recurse -Force
    Write-Host "Folder '$PD_DumpPath' has been deleted."
} else {
    Write-Host "Folder '$PD_DumpPath' does not exist."
}

# Ensure directories exist
if (-Not (Test-Path -Path $WorkingFolder)) {
    Write-Host "Working folder $WorkingFolder does not exist. Creating it now..." -ForegroundColor Yellow
    New-Item -ItemType Directory -Path $WorkingFolder -Force
}

if (-Not (Test-Path -Path $Path)) {
    Write-Host "Path $Path does not exist. Creating it now..." -ForegroundColor Yellow
    New-Item -ItemType Directory -Path $Path -Force | Out-Null
}

# Loop through each Policy ID

    #Write-Host "Processing Policy ID: $PolicyID" -ForegroundColor Cyan

    # Loop through each report name
    foreach ($reportName in $reportNames) {
        Write-Host""
        Write-Host "Exporting Report: $reportName" -ForegroundColor Green

        # Create request body for report export
        $postBody = @{
            'reportName' = $reportName
            # 'filter' = "(PolicyId eq '$PolicyID')"
        }

        # Make the export request
        $exportJob = Invoke-MSGraphRequest -HttpMethod POST -Url "DeviceManagement/reports/exportJobs" -Content $postBody

        # Check report status
        do {
            $exportJob = Invoke-MSGraphRequest -HttpMethod Get -Url "DeviceManagement/reports/exportJobs('$($exportJob.id)')" -InformationAction SilentlyContinue
            Start-Sleep -Seconds 2
            Write-Host -NoNewline '....'
        } while ($exportJob.status -eq 'inprogress')

        if ($exportJob.status -eq 'completed') {
            $fileName = (Split-Path -Path $exportJob.url -Leaf).split('?')[0]
            Invoke-WebRequest -Uri $exportJob.url -Method Get -OutFile "$Path$fileName"

            # Extract CSV data
            Expand-Archive -Path "$Path$fileName" -DestinationPath $Path
            $FileName = Get-ChildItem -Path "$Path*" -Include *.csv | Where {!$_.PSIsContainer}
            $DevicesInfos = Import-Csv -Path $FileName.FullName

            # Remove zip file after extraction
            Remove-Item -Path "$path\*.zip" -Force 
        } else {
            Write-Host "Export job failed for $reportName" -ForegroundColor Red
        }
    }


Write-Host "===============================Phase-1 (Exported Reports) ====================================================(Completed)" -ForegroundColor Green
# Creating final report

# Import CSV files
$devicesWithInventory = Import-Csv -Path $FileName.FullName[0] # Assuming first file is DevicesWithInventory
$windowsHealthReport = Import-Csv -Path $FileName.FullName[1] # Assuming second file is WindowsDeviceHealthAttestationReport

$report = @()

foreach ($device in $devicesWithInventory) {
    $deviceID = $device.'Device ID'.Trim()  # Trim spaces from Device ID
    
    # Match the device in WindowsDeviceHealthAttestationReport by deviceid (case-insensitive, no space)
    $matchingHealthReport = $windowsHealthReport | Where-Object { $_.'deviceid'.Trim().ToLower() -eq $deviceID.ToLower() }

    # Initialize variables for SecureBootStatus and SecureBootValue
    $secureBootStatus = "Not Available"  # Default if no match
    $secureBootValue = 0  # Default if no match

    if ($matchingHealthReport) {
        # If there's a match, get SecureBootStatus and calculate SecureBootValue
        $secureBootStatus = $matchingHealthReport.'SecureBootStatus'
        $secureBootValue = if ($secureBootStatus -eq 'enabled') { 1 } elseif ($secureBootStatus -eq 'Disabled')  { 0 } else {'Not Available'}
        
    }

    # Add the device data to the report
    $report += [PSCustomObject]@{
        DeviceName        = $device.'Device name'            # From DevicesWithInventory
        PrimaryUser      = $device.'Primary user UPN'       # From DevicesWithInventory
        OSVersion        = $device.'OS version'             # From DevicesWithInventory
        SecureBootStatus = $secureBootStatus                # From WindowsDeviceHealthAttestationReport or default
        SecureBootValue  = $secureBootValue                 # Derived value or default
    }
}

# Output the report to the specified path
$report | Export-Csv -Path "$WorkingFolder\Final_Device_Report.csv" -NoTypeInformation
Remove-Item -Path $Path -Force -Recurse
Write-Host "Report has been created and saved to $WorkingFolder\Final_Device_Report.csv"


